<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.module.organization.configure.dao.OrganizationPackageServiceMapper">
  
  <!-- 查询是否存在重复 -->
  <select id="getRepeat" parameterType="org.module.organization.configure.domain.OrganizationPackageService" resultType="map">
    SELECT 
    	bops.id, 
    	bops.organization_service_package_id organizationServicePackageId, 
    	bops.service_type_id serviceTypeId, 
    	bops.price, 
    	bops.times,
    	bst.`name`
    FROM base_organization_package_service bops
    LEFT JOIN base_service_type bst ON bst.id = bops.service_type_id
    WHERE 
    	bops.organization_service_package_id = #{organizationServicePackageId}
    	AND bops.service_type_id = #{serviceTypeId}
  </select>
  <!-- 查询详情 -->
  <select id="getOne" parameterType="org.module.organization.configure.domain.OrganizationPackageService" resultType="map">
    SELECT 
    	bops.id, 
    	bops.organization_service_package_id organizationServicePackageId, 
    	bops.service_type_id serviceTypeId, 
    	bops.price, 
    	bops.times,
    	bst.`name`
    FROM base_organization_package_service bops
    LEFT JOIN base_service_type bst ON bst.id = bops.service_type_id
    WHERE 
    	bops.id = #{id}
  </select>
  
  <!-- 查询服务包内的服务列表-->
  <select id="getList" parameterType="org.module.organization.configure.domain.OrganizationPackageService" resultType="map">
	SELECT
		bops.id,
		bops.organization_service_package_id organizationServicePackageId,
		bops.service_type_id serviceTypeId,
		bops.price,
		bops.times,
		bops.`name`,
		bosp.`name` organizationServicePackageName,
		bosp.service_package_type_id servicePackageTypeId,
		bst.`name` serviceTypeName,
		bst.`explain`,
		bst.`status`
	FROM
		base_organization_package_service bops
	LEFT JOIN base_organization_service_package bosp ON bosp.id = bops.organization_service_package_id
	LEFT JOIN base_service_type bst ON bst.id = bops.service_type_id
	<where>
		<if test="organizationServicePackageId !=null ">
			bops.organization_service_package_id=#{organizationServicePackageId}
		</if>
		<if test="serviceTypeId !=null ">
			and bops.service_type_id=#{serviceTypeId}
		</if>
	</where>
  </select>
  <!-- 查询服务包没有关联的服务列表-->
  <select id="getOrganizationPackageIsNullService" parameterType="org.module.organization.configure.domain.OrganizationPackageService" resultType="map">
	SELECT
		bst.id,
		bst.`name`,
		bst.`code`,
		bst.`status`,
		bst.`explain`<!-- ,
		bops.id organizationPackageServiceId,
		bops.organization_service_package_id organizationServicePackageId,
		bops.service_type_id serviceTypeId,
		bops.price,
		bops.times -->
	FROM
		base_organization_service_type bost
	LEFT JOIN base_service_type bst ON bst.id = bost.service_type_id
	<!--LEFT JOIN base_organization_package_service bops ON bops.service_type_id = bst.id
	 AND bops.organization_service_package_id = #{organizationServicePackageId} -->
	WHERE
		bost.organization_id = #{organizationId} <!-- AND ISNULL(bops.id) --> AND bst.`status` = 0
		<if test="name!=null and name!=''">
		   and  bst.name  like CONCAT(CONCAT('%', #{name}), '%')
		</if>
  </select>
  
  <update id="update" parameterType="org.module.organization.configure.domain.OrganizationPackageService">
    UPDATE base_organization_package_service set id=#{id}
    <if test="price !=null">
    	,price = #{price}
    </if>
    <if test="times !=null">
    	,times = #{times}
    </if>
    <if test="name != null and name !=''">
    	,name = #{name}
    </if>
    WHERE id = #{id}
  </update>
  
  <!-- 删除服务包单条服务关联 -->  
  <delete id="delete" parameterType="org.module.organization.configure.domain.OrganizationPackageService">
    DELETE FROM base_organization_package_service
    WHERE id = #{id}
  </delete>
  
  <!-- 删除服务包所有服务关联 -->
  <delete id="deleteByOrganizationPackageId" parameterType="org.module.organization.configure.domain.OrganizationPackageService">
    DELETE FROM base_organization_package_service
    WHERE organization_service_package_id = #{organizationServicePackageId}
  </delete>
  
  <!-- 添加机构服务包和服务关联 -->
  <insert id="insert" parameterType="org.module.organization.configure.domain.OrganizationPackageService">
    INSERT INTO base_organization_package_service (
    	organization_service_package_id, 
        service_type_id, 
        price, 
        name,
        times
      )
    VALUES (
    	#{organizationServicePackageId}, 
        #{serviceTypeId},
        #{price},
        #{name},
        #{times}
      )
  </insert>
  
  <!-- 批量添加机构服务包和服务关联 -->
  <insert id="batchInsert" parameterType="list">
    INSERT INTO base_organization_package_service (
    	organization_service_package_id, 
        service_type_id, 
        price,
        name, 
        times
      )
    VALUES
   <foreach collection="list"  separator="," item="organizationPackageServices">
    (
    	#{organizationPackageServices.organizationServicePackageId}, 
        #{organizationPackageServices.serviceTypeId},
        #{organizationPackageServices.price},
        #{organizationPackageServices.name},
        #{organizationPackageServices.times}
     )
    </foreach>
  </insert>
  
 
</mapper>